import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  ScrollView,
  ActivityIndicator,
  Image,
  Dimensions,
} from 'react-native';
import { WebView } from 'react-native-webview';
import { captureRef } from 'react-native-view-shot';
// import BluetoothSerial from 'react-native-bluetooth-serial-next';

const { width } = Dimensions.get('window');

const HiddenHTMLToImage = ({ html, onImageGenerated, shouldCapture }) => {
  const webViewRef = useRef();
  

  console.log("enter--------",shouldCapture);
  
  const captureWebView = async () => {
    if (!shouldCapture) return;
    
    try {
      // Add a small delay to ensure WebView is fully loaded
      setTimeout(async () => {
        const uri = await captureRef(webViewRef.current, {
          format: 'png',
          quality: 1.0,
          result: 'base64',
        });

        console.log("uri", uri);
        
        onImageGenerated(uri);
      }, 1000);
    } catch (error) {
      console.error('Capture failed:', error);
      Alert.alert('Error', 'Failed to capture image: ' + error.message);
    }
  };

  return (
    <View style={styles.hiddenContainer}>
      <WebView
        ref={webViewRef}
        source={{ html }}
        style={styles.hiddenWebView}
        onLoadEnd={captureWebView}
        javaScriptEnabled={true}
        domStorageEnabled={true}
        startInLoadingState={false}
      />
    </View>
  );
};

const BrotherPrinterAppSeconOp = () => {
  const [macAddress, setMacAddress] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [availableDevices, setAvailableDevices] = useState([]);
  const [generatedImage, setGeneratedImage] = useState(null);
  const [shouldCapture, setShouldCapture] = useState(false);
  const [customText, setCustomText] = useState('Hello World!');

  // Sample HTML content for printing
  const generatePrintHTML = () => {
    const currentDate = new Date().toLocaleDateString();
    const currentTime = new Date().toLocaleTimeString();
    
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 0;
              padding: 20px;
              background-color: white;
              width: 300px;
            }
            .header {
              text-align: center;
              border-bottom: 2px solid #333;
              padding-bottom: 10px;
              margin-bottom: 20px;
            }
            .content {
              font-size: 14px;
              line-height: 1.6;
            }
            .footer {
              margin-top: 30px;
              text-align: center;
              font-size: 12px;
              color: #666;
            }
            .custom-text {
              font-size: 18px;
              font-weight: bold;
              color: #2196F3;
              text-align: center;
              margin: 20px 0;
              padding: 15px;
              border: 2px dashed #2196F3;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h2>Brother Printer Test</h2>
          </div>
          <div class="content">
            <div class="custom-text">${customText}</div>
            <p><strong>Date:</strong> ${currentDate}</p>
            <p><strong>Time:</strong> ${currentTime}</p>
            <p><strong>MAC Address:</strong> ${macAddress}</p>
            <p><strong>Status:</strong> ${isConnected ? 'Connected' : 'Disconnected'}</p>
          </div>
          <div class="footer">
            <p>Generated by React Native App</p>
          </div>
        </body>
      </html>
    `;
  };

  useEffect(() => {
    initializeBluetooth();
  }, []);

  const initializeBluetooth = async () => {
    try {
    //   const isEnabled = await BluetoothSerial.isEnabled();
    //   if (!isEnabled) {
    //     await BluetoothSerial.enable();
    //   }
      
      // Request permissions
    //   const granted = await BluetoothSerial.requestEnable();
    //   if (granted) {
    //     scanForDevices();
    //   }
    } catch (error) {
      console.error('Bluetooth initialization error:', error);
      Alert.alert('Error', 'Failed to initialize Bluetooth: ' + error.message);
    }
  };

  const scanForDevices = async () => {
    try {
      setIsLoading(true);
    //   const devices = await BluetoothSerial.list();
    //   setAvailableDevices(devices);
    } catch (error) {
      console.error('Scan error:', error);
      Alert.alert('Error', 'Failed to scan for devices: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const connectToDevice = async (address) => {
    try {
      setIsLoading(true);
    //   const connected = await BluetoothSerial.connect(address);
    //   if (connected) {
    //     setIsConnected(true);
    //     setMacAddress(address);
    //     Alert.alert('Success', 'Connected to Brother printer!');
    //   }
    } catch (error) {
      console.error('Connection error:', error);
      Alert.alert('Error', 'Failed to connect: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const disconnectDevice = async () => {
    try {
    //   await BluetoothSerial.disconnect();
      setIsConnected(false);
      Alert.alert('Info', 'Disconnected from printer');
    } catch (error) {
      console.error('Disconnect error:', error);
    }
  };

  const onImageGenerated = (imageUri) => {
    setGeneratedImage(imageUri);
    setShouldCapture(false);
    Alert.alert('Success', 'Image generated successfully!');
  };

  const generateImage = () => {
    if (!customText.trim()) {
      Alert.alert('Error', 'Please enter some text to print');
      return;
    }
    setShouldCapture(true);
    setGeneratedImage(null);
  };

  const printImage = async () => {
    if (!isConnected) {
      Alert.alert('Error', 'Please connect to a Brother printer first');
      return;
    }

    if (!generatedImage) {
      Alert.alert('Error', 'Please generate an image first');
      return;
    }

    try {
      setIsLoading(true);
      
      // Convert base64 to ESC/POS commands for Brother printer
      const escPosCommands = generateESCPOSCommands(generatedImage);

      console.log('Generated ESC/POS Commands:', escPosCommands);
      
      // Send print commands
    //   await BluetoothSerial.write(escPosCommands);
      
      Alert.alert('Success', 'Print job sent to Brother printer!');
    } catch (error) {
      console.error('Print error:', error);
      Alert.alert('Error', 'Failed to print: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };

  const generateESCPOSCommands = (base64Image) => {
    // Basic ESC/POS commands for Brother printers
    const ESC = '\x1B';
    const GS = '\x1D';
    
    let commands = '';
    
    // Initialize printer
    commands += ESC + '@';
    
    // Set print density
    commands += GS + '7' + String.fromCharCode(200) + String.fromCharCode(200);
    
    // Print text header
    commands += ESC + 'a' + String.fromCharCode(1); // Center align
    commands += ESC + '!' + String.fromCharCode(0x10); // Double height
    commands += 'Brother Printer Test\n';
    commands += ESC + '!' + String.fromCharCode(0x00); // Normal size
    
    // Print custom text
    commands += ESC + 'a' + String.fromCharCode(1); // Center align
    commands += customText + '\n\n';
    
    // Print current date/time
    commands += ESC + 'a' + String.fromCharCode(0); // Left align
    commands += 'Date: ' + new Date().toLocaleDateString() + '\n';
    commands += 'Time: ' + new Date().toLocaleTimeString() + '\n';
    commands += 'MAC: ' + macAddress + '\n\n';
    
    // Cut paper (if supported)
    commands += GS + 'V' + String.fromCharCode(65) + String.fromCharCode(3);
    
    return commands;
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Brother Printer Controller</Text>
      </View>

      {/* Custom Text Input */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Print Content</Text>
        <TextInput
          style={styles.textInput}
          placeholder="Enter text to print..."
          value={customText}
          onChangeText={setCustomText}
          multiline
        />
      </View>

      {/* MAC Address Input */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>MAC Address</Text>
        <TextInput
          style={styles.input}
          placeholder="Enter MAC address (e.g., 00:11:22:33:44:55)"
          value={macAddress}
          onChangeText={setMacAddress}
          editable={!isConnected}
        />
      </View>

      {/* Available Devices */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Available Devices</Text>
        {availableDevices.map((device) => (
          <TouchableOpacity
            key={device.id}
            style={[
              styles.deviceItem,
              device.address === macAddress && styles.selectedDevice
            ]}
            onPress={() => connectToDevice(device.address)}
          >
            <Text style={styles.deviceName}>{device.name || 'Unknown Device'}</Text>
            <Text style={styles.deviceAddress}>{device.address}</Text>
          </TouchableOpacity>
        ))}
      </View>

      {/* Connection Status */}
      <View style={styles.statusContainer}>
        <Text style={styles.statusText}>
          Status: {isConnected ? 'Connected' : 'Disconnected'}
        </Text>
        <View style={[styles.statusIndicator, { backgroundColor: isConnected ? '#4CAF50' : '#F44336' }]} />
      </View>

      {/* Action Buttons */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={[styles.button, styles.scanButton]}
          onPress={scanForDevices}
          disabled={isLoading}
        >
          <Text style={styles.buttonText}>Scan Devices</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.button, styles.generateButton]}
          onPress={generateImage}
          disabled={isLoading}
        >
          <Text style={styles.buttonText}>Generate Image</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.button, styles.printButton]}
          onPress={printImage}
          disabled={isLoading || !isConnected}
        >
          <Text style={styles.buttonText}>Print via Bluetooth</Text>
        </TouchableOpacity>

        {isConnected && (
          <TouchableOpacity
            style={[styles.button, styles.disconnectButton]}
            onPress={disconnectDevice}
          >
            <Text style={styles.buttonText}>Disconnect</Text>
          </TouchableOpacity>
        )}
      </View>

      {/* Generated Image Preview */}
      {generatedImage && (
        <View style={styles.imageContainer}>
          <Text style={styles.sectionTitle}>Generated Image Preview</Text>
          <Image
            source={{ uri: `data:image/png;base64,${generatedImage}` }}
            style={styles.previewImage}
            resizeMode="contain"
          />
        </View>
      )}

      {/* Loading Indicator */}
      {isLoading && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#2196F3" />
          <Text style={styles.loadingText}>Processing...</Text>
        </View>
      )}

      {/* Hidden HTML to Image Component */}
      <HiddenHTMLToImage
        html={generatePrintHTML()}
        onImageGenerated={onImageGenerated}
        shouldCapture={shouldCapture}
      />
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#2196F3',
    padding: 20,
    alignItems: 'center',
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: 'white',
  },
  section: {
    backgroundColor: 'white',
    margin: 10,
    padding: 15,
    borderRadius: 8,
    elevation: 2,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#333',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    padding: 10,
    fontSize: 16,
  },
  textInput: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    padding: 10,
    fontSize: 16,
    height: 100,
    textAlignVertical: 'top',
  },
  deviceItem: {
    padding: 10,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    marginBottom: 5,
    backgroundColor: '#f9f9f9',
  },
  selectedDevice: {
    backgroundColor: '#e3f2fd',
    borderColor: '#2196F3',
  },
  deviceName: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  deviceAddress: {
    fontSize: 14,
    color: '#666',
  },
  statusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 15,
  },
  statusText: {
    fontSize: 16,
    marginRight: 10,
  },
  statusIndicator: {
    width: 12,
    height: 12,
    borderRadius: 6,
  },
  buttonContainer: {
    padding: 10,
  },
  button: {
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 10,
  },
  scanButton: {
    backgroundColor: '#FF9800',
  },
  generateButton: {
    backgroundColor: '#4CAF50',
  },
  printButton: {
    backgroundColor: '#2196F3',
  },
  disconnectButton: {
    backgroundColor: '#F44336',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  imageContainer: {
    backgroundColor: 'white',
    margin: 10,
    padding: 15,
    borderRadius: 8,
    elevation: 2,
  },
  previewImage: {
    width: '100%',
    height: 200,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
  },
  loadingContainer: {
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  hiddenContainer: {
    position: 'absolute',
    left: -9999,
    top: -9999,
    width: 300,
    height: 400,
  },
  hiddenWebView: {
    width: 300,
    height: 400,
  },
});

export default BrotherPrinterAppSeconOp;